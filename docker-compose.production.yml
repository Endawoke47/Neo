# CounselFlow Neo Production Infrastructure
# Docker Compose configuration for production deployment

version: '3.8'

services:
  # PostgreSQL Database with performance optimizations
  database:
    image: postgres:15-alpine
    container_name: counselflow-database-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: counselflow_prod
      POSTGRES_USER: counselflow
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    # Remove exposed ports for security - database should only be accessible internally
    # ports:
    #   - "5432:5432"
    networks:
      - counselflow-network
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U counselflow -d counselflow_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: counselflow-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    # Remove exposed ports for security - Redis should only be accessible internally
    # ports:
    #   - "6379:6379"
    networks:
      - counselflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # CounselFlow API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: production
    container_name: counselflow-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8000
      DATABASE_URL: postgresql://counselflow:${DB_PASSWORD}@database:5432/counselflow_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      AI_OPENAI_API_KEY: ${AI_OPENAI_API_KEY}
      AI_ANTHROPIC_API_KEY: ${AI_ANTHROPIC_API_KEY}
      
      # A+++++ Architecture Configuration
      CIRCUIT_BREAKER_ENABLED: "true"
      POLICY_CACHE_ENABLED: "true"
      COMMAND_BUS_AUDIT: "true"
      
      # Performance Optimization
      UV_THREADPOOL_SIZE: 128
      NODE_OPTIONS: "--max-old-space-size=2048"
      
      # Security Configuration
      HELMET_ENABLED: "true"
      RATE_LIMIT_ENABLED: "true"
      CORS_ORIGIN: ${FRONTEND_URL}
      
      # Monitoring
      HEALTH_CHECK_ENABLED: "true"
      METRICS_ENABLED: "true"
      
    ports:
      - "8000:8000"
    volumes:
      - api_logs:/app/logs
      - api_cache:/app/cache
    networks:
      - counselflow-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # CounselFlow Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: production
    container_name: counselflow-web-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_URL}
      NEXT_PUBLIC_WS_URL: ${WS_URL}
    ports:
      - "3000:3000"
    networks:
      - counselflow-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy for A+++++ architecture
  nginx:
    image: nginx:1.25-alpine
    container_name: counselflow-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    networks:
      - counselflow-network
    depends_on:
      - api
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for A+++++ monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: counselflow-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - counselflow-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for A+++++ dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: counselflow-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - counselflow-network
    depends_on:
      - prometheus

  # Elasticsearch for A+++++ logging
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: counselflow-elasticsearch-prod
    restart: unless-stopped
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: true
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    # Remove exposed ports for security - Elasticsearch should be accessed through nginx
    # ports:
    #   - "9200:9200"
    networks:
      - counselflow-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for A+++++ log analysis
  kibana:
    image: kibana:8.11.0
    container_name: counselflow-kibana-prod
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - counselflow-network
    depends_on:
      elasticsearch:
        condition: service_healthy

# A+++++ Network Configuration
networks:
  counselflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# A+++++ Persistent Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  api_cache:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local