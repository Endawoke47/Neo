// Prisma Database Schema (SQLite Compatible)
// User: Endawoke47
// Date: 2025-07-12 21:00:00 UTC

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  firstName           String
  lastName            String
  password            String
  role                String    @default("CLIENT") // ADMIN, PARTNER, ASSOCIATE, PARALEGAL, CLIENT
  isActive            Boolean   @default(true)
  firm                String?
  specialization      String?
  barNumber           String?
  phone               String?
  emailVerified       Boolean   @default(false)
  avatarUrl           String?
  bio                 String?
  timezone            String    @default("UTC")
  languagePreference  String    @default("en")
  isMfaEnabled        Boolean   @default(false)
  lastLoginAt         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relationships
  contracts           Contract[]
  matters             Matter[]
  disputes            Dispute[]
  documents           Document[]
  clients             Client[]
  riskAssessments     Risk[]
  policies            Policy[]
  aiAnalyses          AIAnalysis[]
  refreshTokens       RefreshToken[]
  passwordResets      PasswordReset[]
  auditLogs           AuditLog[]
  
  // Performance Indexes
  @@index([email])
  @@index([role, isActive])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@index([firm, role])
  @@map("users")
}

// Authentication tokens
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// Password reset tokens
model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_resets")
}

// Audit logging
model AuditLog {
  id             String   @id @default(cuid())
  userId         String
  action         String   // CREATE, READ, UPDATE, DELETE
  resource       String   // contracts, matters, users, etc.
  resourceId     String?
  method         String   // HTTP method
  path           String   // Request path
  ipAddress      String
  userAgent      String?
  requestBody    String?  // JSON string
  responseStatus Int
  duration       Int?     // Response time in ms
  metadata       String?  // Additional data as JSON
  timestamp      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

// Client Management
model Client {
  id              String        @id @default(cuid())
  name            String
  email           String        @unique
  phone           String?
  address         String?
  clientType      String        // INDIVIDUAL, BUSINESS, ORGANIZATION
  industry        String?
  notes           String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  assignedLawyer  User          @relation(fields: [assignedLawyerId], references: [id])
  assignedLawyerId String
  contracts       Contract[]
  matters         Matter[]
  disputes        Dispute[]
  documents       Document[]

  // Performance Indexes
  @@index([email])
  @@index([assignedLawyerId, isActive])
  @@index([clientType, isActive])
  @@index([createdAt])
  @@index([name])
  @@map("clients")
}

// Contract Management
model Contract {
  id                String          @id @default(cuid())
  title             String
  description       String?
  type              String          // SERVICE_AGREEMENT, EMPLOYMENT, NDA, etc.
  status            String          @default("DRAFT") // DRAFT, UNDER_REVIEW, ACTIVE, EXPIRED, TERMINATED
  value             Float?
  currency          String          @default("USD")
  startDate         DateTime?
  endDate           DateTime?
  autoRenewal       Boolean         @default(false)
  renewalPeriod     String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relationships
  client            Client          @relation(fields: [clientId], references: [id])
  clientId          String
  assignedLawyer    User            @relation(fields: [assignedLawyerId], references: [id])
  assignedLawyerId  String
  documents         Document[]
  aiAnalyses        AIAnalysis[]

  // Performance Indexes
  @@index([status, assignedLawyerId])
  @@index([clientId, status])
  @@index([type, status])
  @@index([endDate, status])
  @@index([createdAt])
  @@map("contracts")
}

// Matter Management
model Matter {
  id                String        @id @default(cuid())
  title             String
  description       String?
  type              String        // LITIGATION, CORPORATE, REAL_ESTATE, etc.
  status            String        @default("ACTIVE") // ACTIVE, PENDING, CLOSED, ON_HOLD
  priority          String        @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  riskLevel         String        @default("MEDIUM") // LOW, MEDIUM, HIGH
  estimatedValue    Float?
  billableHours     Float         @default(0)
  statute_of_limitations DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relationships
  client            Client        @relation(fields: [clientId], references: [id])
  clientId          String
  assignedLawyer    User          @relation(fields: [assignedLawyerId], references: [id])
  assignedLawyerId  String
  documents         Document[]
  disputes          Dispute[]
  riskAssessments   Risk[]
  aiAnalyses        AIAnalysis[]

  // Performance Indexes
  @@index([status, assignedLawyerId])
  @@index([clientId, status])
  @@index([type, status])
  @@index([priority, status])
  @@index([statute_of_limitations])
  @@index([createdAt])
  @@map("matters")
}

// Dispute Management
model Dispute {
  id                  String          @id @default(cuid())
  title               String
  description         String?
  type                String          // CONTRACT, TORT, EMPLOYMENT, etc.
  status              String          @default("OPEN") // OPEN, IN_PROGRESS, MEDIATION, ARBITRATION, LITIGATION, SETTLED, CLOSED
  priority            String          @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  riskLevel           String          @default("MEDIUM") // LOW, MEDIUM, HIGH
  claimAmount         Float?
  currency            String          @default("USD")
  courtName           String?
  caseNumber          String?
  timeline            DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relationships
  matter              Matter?         @relation(fields: [matterId], references: [id])
  matterId            String?
  client              Client          @relation(fields: [clientId], references: [id])
  clientId            String
  assignedLawyer      User            @relation(fields: [assignedLawyerId], references: [id])
  assignedLawyerId    String
  documents           Document[]
  riskAssessments     Risk[]
  aiAnalyses          AIAnalysis[]

  @@map("disputes")
}

// Document Management
model Document {
  id                String          @id @default(cuid())
  title             String
  description       String?
  type              String          // CONTRACT, LEGAL_BRIEF, CORRESPONDENCE, etc.
  category          String?
  filePath          String?
  fileType          String?
  fileSize          Int?
  isConfidential    Boolean         @default(false)
  tags              String?         // JSON array as string
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relationships
  uploadedBy        User            @relation(fields: [uploadedById], references: [id])
  uploadedById      String
  client            Client?         @relation(fields: [clientId], references: [id])
  clientId          String?
  contract          Contract?       @relation(fields: [contractId], references: [id])
  contractId        String?
  matter            Matter?         @relation(fields: [matterId], references: [id])
  matterId          String?
  dispute           Dispute?        @relation(fields: [disputeId], references: [id])
  disputeId         String?
  aiAnalyses        AIAnalysis[]

  @@map("documents")
}

// Risk Assessment
model Risk {
  id                String        @id @default(cuid())
  title             String
  description       String?
  category          String        // LEGAL, FINANCIAL, OPERATIONAL, etc.
  type              String        // LIABILITY, COMPLIANCE, CONTRACT, etc.
  level             String        @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  probability       Float         @default(0.5) // 0.0 to 1.0
  impact            Float         @default(0.5) // 0.0 to 1.0
  riskScore         Float         @default(0.25) // probability * impact
  mitigationStatus  String        @default("IDENTIFIED") // IDENTIFIED, PLANNED, etc.
  mitigationPlan    String?
  owner             String?
  dueDate           DateTime?
  reviewDate        DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relationships
  assessedBy        User          @relation(fields: [assessedById], references: [id])
  assessedById      String
  matter            Matter?       @relation(fields: [matterId], references: [id])
  matterId          String?
  dispute           Dispute?      @relation(fields: [disputeId], references: [id])
  disputeId         String?

  @@map("risks")
}

// Policy Management
model Policy {
  id              String        @id @default(cuid())
  title           String
  description     String?
  category        String        // HR, LEGAL, COMPLIANCE, etc.
  type            String        // PROCEDURE, GUIDELINE, STANDARD, etc.
  status          String        @default("DRAFT") // DRAFT, UNDER_REVIEW, etc.
  version         String        @default("1.0")
  effectiveDate   DateTime?
  reviewDate      DateTime?
  expiryDate      DateTime?
  approvalRequired Boolean      @default(true)
  content         String        // Policy content
  tags            String?       // JSON string of tags
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  createdBy       User          @relation(fields: [createdById], references: [id])
  createdById     String

  @@map("policies")
}

// AI Analysis
model AIAnalysis {
  id              String          @id @default(cuid())
  title           String
  type            String          // CONTRACT_ANALYSIS, RISK_ASSESSMENT, etc.
  status          String          @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  input           String?         // JSON string of input data
  output          String?         // JSON string of analysis results
  confidence      Int?            // 0 to 100
  model           String?
  processingTime  Int?            // in milliseconds
  tokensUsed      Int?
  cost            Float?
  createdAt       DateTime        @default(now())
  completedAt     DateTime?

  // Relationships
  requestedBy     User            @relation(fields: [requestedById], references: [id])
  requestedById   String
  contract        Contract?       @relation(fields: [contractId], references: [id])
  contractId      String?
  matter          Matter?         @relation(fields: [matterId], references: [id])
  matterId        String?
  dispute         Dispute?        @relation(fields: [disputeId], references: [id])
  disputeId       String?
  document        Document?       @relation(fields: [documentId], references: [id])
  documentId      String?

  // Performance Indexes
  @@index([type, status])
  @@index([requestedById, createdAt])
  @@index([status, createdAt])
  @@index([contractId])
  @@index([matterId])
  @@index([documentId])
  @@map("ai_analyses")
}
