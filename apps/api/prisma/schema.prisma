<<<<<<< HEAD
// CounselFlow Neo - Optimized Schema for SQLite Development
=======
// Optimized Prisma Database Schema (PostgreSQL)
// Optimized for production performance with indexes
// Date: 2025-07-29
>>>>>>> 86de1ee (ðŸš€ Complete Performance Optimization - Production Ready)

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                          String    @id @default(cuid())
  email                       String    @unique
  firstName                   String
  lastName                    String
  password                    String
  phoneNumber                 String?
  
<<<<<<< HEAD
  // Account Status
  role                        String    @default("USER")  // ADMIN, USER, GUEST
  status                      String    @default("ACTIVE") // ACTIVE, PENDING_VERIFICATION, SUSPENDED, DEACTIVATED
  isEmailVerified             Boolean   @default(false)
  
  // Profile Information
  bio                         String?
  timezone                    String    @default("UTC")
  languagePreference          String    @default("en")
  profileImageUrl             String?
  
  // Security
  passwordResetToken          String?
  passwordResetExpires        DateTime?
  emailVerificationToken      String?
  emailVerificationExpires    DateTime?
  
  // Login Tracking
  lastLoginAt                 DateTime?
  lastFailedLoginAt           DateTime?
  failedLoginAttempts         Int       @default(0)
  
  // Timestamps
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  
  // Relations
  sessions                    Session[]
  clients                     Client[]
  matters                     Matter[]
  contracts                   Contract[]
  documents                   Document[]
  auditLogs                   AuditLog[]
  
  // Performance Indexes
  @@index([email])
  @@index([status])
  @@index([role])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@index([isEmailVerified])
=======
  // Indexes for performance
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@index([firm])
  @@fulltext([firstName, lastName])
>>>>>>> 86de1ee (ðŸš€ Complete Performance Optimization - Production Ready)
  @@map("users")
}

model Session {
  id                String    @id @default(cuid())
  userId            String
  ipAddress         String?
  userAgent         String?
  isActive          Boolean   @default(true)
  expiresAt         DateTime
  lastActivityAt    DateTime  @default(now())
  createdAt         DateTime  @default(now())
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
<<<<<<< HEAD
  // Performance Indexes
  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([userId, isActive])
  @@map("sessions")
=======
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// Password reset tokens
model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@map("password_resets")
}

// Audit logging
model AuditLog {
  id             String   @id @default(cuid())
  userId         String
  action         String   // CREATE, READ, UPDATE, DELETE
  resource       String   // contracts, matters, users, etc.
  resourceId     String?
  method         String   // HTTP method
  path           String   // Request path
  ipAddress      String
  userAgent      String?
  requestBody    String?  // JSON string
  responseStatus Int
  duration       Int?     // Response time in ms
  metadata       String?  // Additional data as JSON
  timestamp      DateTime @default(now())
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([ipAddress])
  @@map("audit_logs")
>>>>>>> 86de1ee (ðŸš€ Complete Performance Optimization - Production Ready)
}

// Client Management
model Client {
  id                  String      @id @default(cuid())
  name                String
  email               String      @unique
  phoneNumber         String?
  address             String?
  
<<<<<<< HEAD
  // Client Type and Industry
  clientType          String      @default("INDIVIDUAL") // INDIVIDUAL, CORPORATION, PARTNERSHIP, GOVERNMENT, NGO
  industry            String?
  description         String?
  
  // Business Information
  taxId               String?
  registrationNumber  String?
  website             String?
  
  // Status and Assignment
  status              String      @default("ACTIVE") // ACTIVE, INACTIVE, PROSPECT, FORMER
  assignedLawyerId    String?
  
  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  // Relations
  assignedLawyer      User?       @relation(fields: [assignedLawyerId], references: [id])
  matters             Matter[]
  contracts           Contract[]
  documents           Document[]
  
  // Performance Indexes
  @@index([email])
  @@index([status])
  @@index([clientType])
  @@index([assignedLawyerId])
  @@index([createdAt])
  @@index([industry])
  @@map("clients")
}

=======
  // Relationships
  assignedLawyer  User          @relation(fields: [assignedLawyerId], references: [id])
  assignedLawyerId String
  contracts       Contract[]
  matters         Matter[]
  disputes        Dispute[]
  documents       Document[]

  @@index([assignedLawyerId])
  @@index([clientType])
  @@index([isActive])
  @@index([createdAt])
  @@fulltext([name])
  @@map("clients")
}

// Contract Management
model Contract {
  id                String          @id @default(cuid())
  title             String
  description       String?
  type              String          // SERVICE_AGREEMENT, EMPLOYMENT, NDA, etc.
  status            String          @default("DRAFT") // DRAFT, UNDER_REVIEW, ACTIVE, EXPIRED, TERMINATED
  value             Float?
  currency          String          @default("USD")
  startDate         DateTime?
  endDate           DateTime?
  autoRenewal       Boolean         @default(false)
  renewalPeriod     String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relationships
  client            Client          @relation(fields: [clientId], references: [id])
  clientId          String
  assignedLawyer    User            @relation(fields: [assignedLawyerId], references: [id])
  assignedLawyerId  String
  documents         Document[]
  aiAnalyses        AIAnalysis[]

  @@index([clientId])
  @@index([assignedLawyerId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([endDate])
  @@fulltext([title, description])
  @@map("contracts")
}

>>>>>>> 86de1ee (ðŸš€ Complete Performance Optimization - Production Ready)
// Matter Management
model Matter {
  id                String      @id @default(cuid())
  title             String
  description       String?
  
  // Matter Classification
  type              String      // CORPORATE, LITIGATION, INTELLECTUAL_PROPERTY, REAL_ESTATE, EMPLOYMENT, etc.
  status            String      @default("OPEN") // OPEN, IN_PROGRESS, UNDER_REVIEW, ON_HOLD, COMPLETED, CLOSED
  priority          String      @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  riskLevel         String      @default("LOW") // LOW, MEDIUM, HIGH, CRITICAL
  
  // Financial Information
  estimatedValue    Float?
  actualValue       Float?
  billableHours     Float       @default(0)
  
  // Timeline
  startDate         DateTime?
  targetDate        DateTime?
  completedDate     DateTime?
  
  // Assignment and Client
  clientId          String
  assignedLawyerId  String?
  
  // Additional Information (simplified as text fields for SQLite)
  tags              String?     // JSON-like string
  customFields      String?     // JSON-like string
  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  client            Client      @relation(fields: [clientId], references: [id])
  assignedLawyer    User?       @relation(fields: [assignedLawyerId], references: [id])
  contracts         Contract[]
  documents         Document[]
<<<<<<< HEAD
  
  // Performance Indexes
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([riskLevel])
  @@index([clientId])
  @@index([assignedLawyerId])
  @@index([createdAt])
  @@index([status, priority])
  @@index([clientId, status])
  @@map("matters")
}

// Contract Management
model Contract {
  id                String        @id @default(cuid())
  title             String
  description       String?
  
  // Contract Details
  type              String        // SERVICE_AGREEMENT, EMPLOYMENT_CONTRACT, VENDOR_AGREEMENT, NDA, etc.
  status            String        @default("DRAFT") // DRAFT, UNDER_REVIEW, PENDING_SIGNATURE, SIGNED, APPROVED, EXECUTED, EXPIRED, TERMINATED
  value             Float?
  currency          String        @default("USD")
  
  // Timeline
  startDate         DateTime?
  endDate           DateTime?
  signedDate        DateTime?
  
  // Terms and Conditions
  renewalTerms      String?
  terminationClause String?
  
  // Risk and Priority
  riskLevel         String        @default("LOW") // LOW, MEDIUM, HIGH, CRITICAL
  priority          String        @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  
  // Assignment and Client
  clientId          String
  assignedLawyerId  String?
  matterId          String?
  
  // Additional Information (simplified as text fields for SQLite)
  tags              String?       // JSON-like string
  customFields      String?       // JSON-like string
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  client            Client        @relation(fields: [clientId], references: [id])
  assignedLawyer    User?         @relation(fields: [assignedLawyerId], references: [id])
  matter            Matter?       @relation(fields: [matterId], references: [id])
  documents         Document[]
  
  // Performance Indexes
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([clientId])
  @@index([assignedLawyerId])
  @@index([matterId])
  @@index([createdAt])
  @@index([endDate])
  @@index([status, priority])
  @@index([clientId, status])
  @@map("contracts")
=======
  disputes          Dispute[]
  riskAssessments   Risk[]
  aiAnalyses        AIAnalysis[]

  @@index([clientId])
  @@index([assignedLawyerId])
  @@index([status])
  @@index([priority])
  @@index([type])
  @@index([createdAt])
  @@index([statute_of_limitations])
  @@fulltext([title, description])
  @@map("matters")
}

// Dispute Management
model Dispute {
  id                  String          @id @default(cuid())
  title               String
  description         String?
  type                String          // CONTRACT, TORT, EMPLOYMENT, etc.
  status              String          @default("OPEN") // OPEN, IN_PROGRESS, MEDIATION, ARBITRATION, LITIGATION, SETTLED, CLOSED
  priority            String          @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  riskLevel           String          @default("MEDIUM") // LOW, MEDIUM, HIGH
  claimAmount         Float?
  currency            String          @default("USD")
  courtName           String?
  caseNumber          String?
  timeline            DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relationships
  matter              Matter?         @relation(fields: [matterId], references: [id])
  matterId            String?
  client              Client          @relation(fields: [clientId], references: [id])
  clientId            String
  assignedLawyer      User            @relation(fields: [assignedLawyerId], references: [id])
  assignedLawyerId    String
  documents           Document[]
  riskAssessments     Risk[]
  aiAnalyses          AIAnalysis[]

  @@index([matterId])
  @@index([clientId])
  @@index([assignedLawyerId])
  @@index([status])
  @@index([priority])
  @@index([type])
  @@index([createdAt])
  @@index([timeline])
  @@fulltext([title, description])
  @@map("disputes")
>>>>>>> 86de1ee (ðŸš€ Complete Performance Optimization - Production Ready)
}

// Document Management
model Document {
<<<<<<< HEAD
=======
  id                String          @id @default(cuid())
  title             String
  description       String?
  type              String          // CONTRACT, LEGAL_BRIEF, CORRESPONDENCE, etc.
  category          String?
  filePath          String?
  fileType          String?
  fileSize          Int?
  isConfidential    Boolean         @default(false)
  tags              String?         // JSON array as string
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relationships
  uploadedBy        User            @relation(fields: [uploadedById], references: [id])
  uploadedById      String
  client            Client?         @relation(fields: [clientId], references: [id])
  clientId          String?
  contract          Contract?       @relation(fields: [contractId], references: [id])
  contractId        String?
  matter            Matter?         @relation(fields: [matterId], references: [id])
  matterId          String?
  dispute           Dispute?        @relation(fields: [disputeId], references: [id])
  disputeId         String?
  aiAnalyses        AIAnalysis[]

  @@index([uploadedById])
  @@index([clientId])
  @@index([contractId])
  @@index([matterId])
  @@index([disputeId])
  @@index([type])
  @@index([category])
  @@index([isConfidential])
  @@index([createdAt])
  @@fulltext([title, description])
  @@map("documents")
}

// Risk Assessment
model Risk {
>>>>>>> 86de1ee (ðŸš€ Complete Performance Optimization - Production Ready)
  id                String        @id @default(cuid())
  title             String
  description       String?
  
  // File Information
  type              String        // CONTRACT, LEGAL_MEMO, COURT_FILING, CORRESPONDENCE, RESEARCH, etc.
  fileType          String        // MIME type
  fileSize          Int
  fileName          String
  filePath          String
  fileHash          String?       // For integrity verification
  
  // Security and Access
  isConfidential    Boolean       @default(false)
  encryptionKey     String?       // For encrypted documents
  accessLevel       String        @default("PRIVATE") // PUBLIC, INTERNAL, CONFIDENTIAL, RESTRICTED, PRIVATE
  
  // Version Control
  version           String        @default("1.0")
  parentDocumentId  String?
  
  // Assignment and Relations
  uploadedById      String
  clientId          String?
  matterId          String?
  contractId        String?
  
  // Metadata (simplified as text fields for SQLite)
  tags              String?       // JSON-like string
  customFields      String?       // JSON-like string
  ocrText           String?       // OCR extracted text
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  uploadedBy        User          @relation(fields: [uploadedById], references: [id])
  client            Client?       @relation(fields: [clientId], references: [id])
  matter            Matter?       @relation(fields: [matterId], references: [id])
<<<<<<< HEAD
  contract          Contract?     @relation(fields: [contractId], references: [id])
  parentDocument    Document?     @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  childDocuments    Document[]    @relation("DocumentVersions")
  
  // Performance Indexes
  @@index([type])
  @@index([uploadedById])
  @@index([clientId])
  @@index([matterId])
  @@index([contractId])
  @@index([createdAt])
  @@index([isConfidential])
  @@index([accessLevel])
  @@map("documents")
}

// Performance and Security Enhancement: Audit Log
model AuditLog {
  id              String    @id @default(cuid())
  
  // Audit Information
  action          String    // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, ACCESS, etc.
  entityType      String    // USER, CLIENT, MATTER, CONTRACT, DOCUMENT, etc.
  entityId        String    // ID of the affected entity
  
  // Change Details
  oldValues       String?   // JSON string of old values
  newValues       String?   // JSON string of new values
  changedFields   String?   // List of changed field names
  
  // User and Context
  userId          String?
  userEmail       String?
  ipAddress       String?
  userAgent       String?
  
  // Additional Context
  description     String?   // Human-readable description
  severity        String    @default("INFO") // DEBUG, INFO, WARN, ERROR, CRITICAL
  metadata        String?   // Additional JSON metadata
  
  // Timestamps
  timestamp       DateTime  @default(now())
  
  // Relations
  user            User?     @relation(fields: [userId], references: [id])
  
  // Performance Indexes
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([timestamp])
  @@index([severity])
  @@index([action, entityType])
  @@index([entityType, entityId])
  @@map("audit_logs")
}
=======
  matterId          String?
  dispute           Dispute?      @relation(fields: [disputeId], references: [id])
  disputeId         String?

  @@index([assessedById])
  @@index([matterId])
  @@index([disputeId])
  @@index([category])
  @@index([level])
  @@index([riskScore])
  @@index([createdAt])
  @@index([reviewDate])
  @@fulltext([title, description])
  @@map("risks")
}

// Policy Management
model Policy {
  id              String        @id @default(cuid())
  title           String
  description     String?
  category        String        // HR, LEGAL, COMPLIANCE, etc.
  type            String        // PROCEDURE, GUIDELINE, STANDARD, etc.
  status          String        @default("DRAFT") // DRAFT, UNDER_REVIEW, etc.
  version         String        @default("1.0")
  effectiveDate   DateTime?
  reviewDate      DateTime?
  expiryDate      DateTime?
  approvalRequired Boolean      @default(true)
  content         String        // Policy content
  tags            String?       // JSON string of tags
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  createdBy       User          @relation(fields: [createdById], references: [id])
  createdById     String

  @@index([createdById])
  @@index([category])
  @@index([status])
  @@index([effectiveDate])
  @@index([reviewDate])
  @@index([createdAt])
  @@fulltext([title, description, content])
  @@map("policies")
}

// AI Analysis
model AIAnalysis {
  id              String          @id @default(cuid())
  title           String
  type            String          // CONTRACT_ANALYSIS, RISK_ASSESSMENT, etc.
  status          String          @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  input           String?         // JSON string of input data
  output          String?         // JSON string of analysis results
  confidence      Int?            // 0 to 100
  model           String?
  processingTime  Int?            // in milliseconds
  tokensUsed      Int?
  cost            Float?
  createdAt       DateTime        @default(now())
  completedAt     DateTime?

  // Relationships
  requestedBy     User            @relation(fields: [requestedById], references: [id])
  requestedById   String
  contract        Contract?       @relation(fields: [contractId], references: [id])
  contractId      String?
  matter          Matter?         @relation(fields: [matterId], references: [id])
  matterId        String?
  dispute         Dispute?        @relation(fields: [disputeId], references: [id])
  disputeId       String?
  document        Document?       @relation(fields: [documentId], references: [id])
  documentId      String?

  @@index([requestedById])
  @@index([contractId])
  @@index([matterId])
  @@index([disputeId])
  @@index([documentId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([completedAt])
  @@map("ai_analyses")
}
>>>>>>> 86de1ee (ðŸš€ Complete Performance Optimization - Production Ready)
