// CounselFlow Neo - Optimized Schema for SQLite Development

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                          String    @id @default(cuid())
  email                       String    @unique
  firstName                   String
  lastName                    String
  password                    String
  phoneNumber                 String?
  
  // Account Status
  role                        String    @default("USER")  // ADMIN, USER, GUEST
  status                      String    @default("ACTIVE") // ACTIVE, PENDING_VERIFICATION, SUSPENDED, DEACTIVATED
  isEmailVerified             Boolean   @default(false)
  
  // Profile Information
  bio                         String?
  timezone                    String    @default("UTC")
  languagePreference          String    @default("en")
  profileImageUrl             String?
  
  // Security
  passwordResetToken          String?
  passwordResetExpires        DateTime?
  emailVerificationToken      String?
  emailVerificationExpires    DateTime?
  
  // Login Tracking
  lastLoginAt                 DateTime?
  lastFailedLoginAt           DateTime?
  failedLoginAttempts         Int       @default(0)
  
  // Timestamps
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  
  // Relations
  sessions                    Session[]
  clients                     Client[]
  matters                     Matter[]
  contracts                   Contract[]
  documents                   Document[]
  auditLogs                   AuditLog[]
  
  // Performance Indexes
  @@index([email])
  @@index([status])
  @@index([role])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@index([isEmailVerified])
  @@map("users")
}

model Session {
  id                String    @id @default(cuid())
  userId            String
  ipAddress         String?
  userAgent         String?
  isActive          Boolean   @default(true)
  expiresAt         DateTime
  lastActivityAt    DateTime  @default(now())
  createdAt         DateTime  @default(now())
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Performance Indexes
  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([userId, isActive])
  @@map("sessions")
}

// Client Management
model Client {
  id                  String      @id @default(cuid())
  name                String
  email               String      @unique
  phoneNumber         String?
  address             String?
  
  // Client Type and Industry
  clientType          String      @default("INDIVIDUAL") // INDIVIDUAL, CORPORATION, PARTNERSHIP, GOVERNMENT, NGO
  industry            String?
  description         String?
  
  // Business Information
  taxId               String?
  registrationNumber  String?
  website             String?
  
  // Status and Assignment
  status              String      @default("ACTIVE") // ACTIVE, INACTIVE, PROSPECT, FORMER
  assignedLawyerId    String?
  
  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  // Relations
  assignedLawyer      User?       @relation(fields: [assignedLawyerId], references: [id])
  matters             Matter[]
  contracts           Contract[]
  documents           Document[]
  
  // Performance Indexes
  @@index([email])
  @@index([status])
  @@index([clientType])
  @@index([assignedLawyerId])
  @@index([createdAt])
  @@index([industry])
  @@map("clients")
}

// Matter Management
model Matter {
  id                String      @id @default(cuid())
  title             String
  description       String?
  
  // Matter Classification
  type              String      // CORPORATE, LITIGATION, INTELLECTUAL_PROPERTY, REAL_ESTATE, EMPLOYMENT, etc.
  status            String      @default("OPEN") // OPEN, IN_PROGRESS, UNDER_REVIEW, ON_HOLD, COMPLETED, CLOSED
  priority          String      @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  riskLevel         String      @default("LOW") // LOW, MEDIUM, HIGH, CRITICAL
  
  // Financial Information
  estimatedValue    Float?
  actualValue       Float?
  billableHours     Float       @default(0)
  
  // Timeline
  startDate         DateTime?
  targetDate        DateTime?
  completedDate     DateTime?
  
  // Assignment and Client
  clientId          String
  assignedLawyerId  String?
  
  // Additional Information (simplified as text fields for SQLite)
  tags              String?     // JSON-like string
  customFields      String?     // JSON-like string
  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  client            Client      @relation(fields: [clientId], references: [id])
  assignedLawyer    User?       @relation(fields: [assignedLawyerId], references: [id])
  contracts         Contract[]
  documents         Document[]
  
  // Performance Indexes
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([riskLevel])
  @@index([clientId])
  @@index([assignedLawyerId])
  @@index([createdAt])
  @@index([status, priority])
  @@index([clientId, status])
  @@map("matters")
}

// Contract Management
model Contract {
  id                String        @id @default(cuid())
  title             String
  description       String?
  
  // Contract Details
  type              String        // SERVICE_AGREEMENT, EMPLOYMENT_CONTRACT, VENDOR_AGREEMENT, NDA, etc.
  status            String        @default("DRAFT") // DRAFT, UNDER_REVIEW, PENDING_SIGNATURE, SIGNED, APPROVED, EXECUTED, EXPIRED, TERMINATED
  value             Float?
  currency          String        @default("USD")
  
  // Timeline
  startDate         DateTime?
  endDate           DateTime?
  signedDate        DateTime?
  
  // Terms and Conditions
  renewalTerms      String?
  terminationClause String?
  
  // Risk and Priority
  riskLevel         String        @default("LOW") // LOW, MEDIUM, HIGH, CRITICAL
  priority          String        @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  
  // Assignment and Client
  clientId          String
  assignedLawyerId  String?
  matterId          String?
  
  // Additional Information (simplified as text fields for SQLite)
  tags              String?       // JSON-like string
  customFields      String?       // JSON-like string
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  client            Client        @relation(fields: [clientId], references: [id])
  assignedLawyer    User?         @relation(fields: [assignedLawyerId], references: [id])
  matter            Matter?       @relation(fields: [matterId], references: [id])
  documents         Document[]
  
  // Performance Indexes
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([clientId])
  @@index([assignedLawyerId])
  @@index([matterId])
  @@index([createdAt])
  @@index([endDate])
  @@index([status, priority])
  @@index([clientId, status])
  @@map("contracts")
}

// Document Management
model Document {
  id                String        @id @default(cuid())
  title             String
  description       String?
  
  // File Information
  type              String        // CONTRACT, LEGAL_MEMO, COURT_FILING, CORRESPONDENCE, RESEARCH, etc.
  fileType          String        // MIME type
  fileSize          Int
  fileName          String
  filePath          String
  fileHash          String?       // For integrity verification
  
  // Security and Access
  isConfidential    Boolean       @default(false)
  encryptionKey     String?       // For encrypted documents
  accessLevel       String        @default("PRIVATE") // PUBLIC, INTERNAL, CONFIDENTIAL, RESTRICTED, PRIVATE
  
  // Version Control
  version           String        @default("1.0")
  parentDocumentId  String?
  
  // Assignment and Relations
  uploadedById      String
  clientId          String?
  matterId          String?
  contractId        String?
  
  // Metadata (simplified as text fields for SQLite)
  tags              String?       // JSON-like string
  customFields      String?       // JSON-like string
  ocrText           String?       // OCR extracted text
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  uploadedBy        User          @relation(fields: [uploadedById], references: [id])
  client            Client?       @relation(fields: [clientId], references: [id])
  matter            Matter?       @relation(fields: [matterId], references: [id])
  contract          Contract?     @relation(fields: [contractId], references: [id])
  parentDocument    Document?     @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  childDocuments    Document[]    @relation("DocumentVersions")
  
  // Performance Indexes
  @@index([type])
  @@index([uploadedById])
  @@index([clientId])
  @@index([matterId])
  @@index([contractId])
  @@index([createdAt])
  @@index([isConfidential])
  @@index([accessLevel])
  @@map("documents")
}

// Performance and Security Enhancement: Audit Log
model AuditLog {
  id              String    @id @default(cuid())
  
  // Audit Information
  action          String    // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, ACCESS, etc.
  entityType      String    // USER, CLIENT, MATTER, CONTRACT, DOCUMENT, etc.
  entityId        String    // ID of the affected entity
  
  // Change Details
  oldValues       String?   // JSON string of old values
  newValues       String?   // JSON string of new values
  changedFields   String?   // List of changed field names
  
  // User and Context
  userId          String?
  userEmail       String?
  ipAddress       String?
  userAgent       String?
  
  // Additional Context
  description     String?   // Human-readable description
  severity        String    @default("INFO") // DEBUG, INFO, WARN, ERROR, CRITICAL
  metadata        String?   // Additional JSON metadata
  
  // Timestamps
  timestamp       DateTime  @default(now())
  
  // Relations
  user            User?     @relation(fields: [userId], references: [id])
  
  // Performance Indexes
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([timestamp])
  @@index([severity])
  @@index([action, entityType])
  @@index([entityType, entityId])
  @@map("audit_logs")
}