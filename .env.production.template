# CounselFlow Neo - Production Environment Template
# Copy to .env.production and configure with your actual values

# ===== CORE APPLICATION =====
NODE_ENV=production
PORT=8000

# ===== DATABASE =====
# Required: PostgreSQL connection string
DATABASE_URL=postgresql://counselflow:YOUR_SECURE_PASSWORD@localhost:5432/counselflow_production

# ===== JWT SECRETS =====
# Required: Generate secure random strings (min 64 characters recommended)
# Use: openssl rand -hex 64
JWT_SECRET=YOUR_SECURE_JWT_SECRET_HERE_MIN_64_CHARS
JWT_REFRESH_SECRET=YOUR_SECURE_JWT_REFRESH_SECRET_HERE_MIN_64_CHARS
JWT_AUDIENCE=counselflow-api
JWT_ISSUER=counselflow

# ===== REDIS (Recommended for production) =====
REDIS_URL=redis://localhost:6379

# ===== AI SERVICES (Optional but recommended) =====
# OpenAI API for advanced legal analysis
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic Claude for complex legal reasoning
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Google AI for comprehensive research
GOOGLE_AI_API_KEY=your_google_ai_api_key_here

# ===== EMAIL CONFIGURATION (Required for production) =====
# SMTP settings for transactional emails
SMTP_HOST=smtp.your-provider.com
SMTP_PORT=587
SMTP_USER=your_smtp_username
SMTP_PASSWORD=your_smtp_password

# ===== SECURITY CONFIGURATION =====
# CORS - Specify your frontend domain(s)
CORS_ORIGIN=https://your-frontend-domain.com

# Rate limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# File uploads
UPLOAD_MAX_SIZE=10485760
UPLOAD_ALLOWED_TYPES=pdf,doc,docx,txt,rtf

# ===== MONITORING & LOGGING =====
HEALTH_CHECK_ENABLED=true
METRICS_ENABLED=true

# ===== EXTERNAL SERVICES =====
# Optional: Elasticsearch for logging
ELASTICSEARCH_URL=http://localhost:9200
ELASTIC_PASSWORD=your_elastic_password

# Optional: Grafana admin password
GRAFANA_PASSWORD=your_secure_grafana_password

# ===== SECRETS ENCRYPTION =====
# For encrypting sensitive data at rest
SECRETS_ENCRYPTION_KEY=your_256_bit_encryption_key_here

# ===== FRONTEND CONFIGURATION =====
# URLs for frontend application
API_URL=https://api.your-domain.com
WS_URL=wss://api.your-domain.com
FRONTEND_URL=https://your-frontend-domain.com

# ===== DATABASE PASSWORDS =====
# For Docker Compose
DB_PASSWORD=your_secure_database_password
REDIS_PASSWORD=your_secure_redis_password

# ===== SSL/TLS (Production) =====
# Paths to SSL certificates (if not using reverse proxy)
SSL_CERT_PATH=/path/to/your/certificate.pem
SSL_KEY_PATH=/path/to/your/private-key.pem

# ===== BACKUP CONFIGURATION =====
# S3 or other cloud storage for backups
BACKUP_S3_BUCKET=your-backup-bucket
BACKUP_S3_REGION=your-region
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key

# ===== LEGAL DATABASE INTEGRATIONS =====
# Optional: Connect to legal databases
WESTLAW_API_KEY=your_westlaw_api_key
LEXISNEXIS_API_KEY=your_lexisnexis_api_key

# ===== NOTIFICATION SERVICES =====
# Optional: Slack/Teams notifications
SLACK_WEBHOOK_URL=your_slack_webhook_url
TEAMS_WEBHOOK_URL=your_teams_webhook_url

# ===== PERFORMANCE MONITORING =====
# Optional: APM services
SENTRY_DSN=your_sentry_dsn
NEW_RELIC_LICENSE_KEY=your_new_relic_key
DATADOG_API_KEY=your_datadog_api_key

# ===== FEATURE FLAGS =====
# Enable/disable features
FEATURE_AI_ANALYSIS=true
FEATURE_DOCUMENT_OCR=true
FEATURE_REAL_TIME_COLLAB=true
FEATURE_ADVANCED_ANALYTICS=true

# ===== COMPLIANCE =====
# Data retention policies (in days)
DATA_RETENTION_DAYS=2555  # 7 years
LOG_RETENTION_DAYS=90
AUDIT_RETENTION_DAYS=3650  # 10 years

# ===== TIMEZONE =====
TZ=UTC

# ===== NOTES =====
# 1. Never commit this file with real secrets to version control
# 2. Use environment-specific values for each deployment
# 3. Regularly rotate secrets and API keys
# 4. Monitor for any hardcoded secrets in the application code
# 5. Use a secrets management service in production (AWS Secrets Manager, HashiCorp Vault, etc.)

# ===== QUICK SETUP COMMANDS =====
# Generate secure JWT secrets:
# openssl rand -hex 64

# Generate encryption key:
# openssl rand -hex 32

# Test database connection:
# psql $DATABASE_URL -c "SELECT version();"

# Verify Redis connection:
# redis-cli -u $REDIS_URL ping